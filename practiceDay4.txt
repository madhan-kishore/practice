#lambda function:
'''a="Madhan"
b=lambda x:x.upper()
print(b(a))    #MADHAN

n=lambda x: "positive" if x>0 else "Negative" if x<0 else "zero"
print(n(1)) #positive
print(n(-1)) #Negative
print(n(0)) #zero

sq=lambda x: x**2
print(sq(3)) #9

li=[lambda arg=x: arg*10 for x in range(1,5)]
for i in li:
    print(i())
output:10
20
30
40 '''

check=lambda x: "Even" if x%2==0 else "odd"
print(check(5)) #odd
print(check(6)) #Even


#lambda with multiple arguements:
calc=lambda x,y:(x+y,x-y)
print(calc(3,4)) #(7,-1) #returns a tuple

calc=lambda x,y:(x+y,x-y,x%y,x*y)
print(calc(3,4)) #(7, -1, 3, 12)

n=[1,2,3,4,5,6]
even=filter(lambda x:x%2==0, n)
print(list(even)) #[2, 4, 6]

a=[1,2,3,4]
b=map(lambda x:x*2, a)
print(list(b)) #[2, 4, 6, 8]

from functools import reduce
a=[1,2,3,4]
b=reduce(lambda x,y:x*y, a) #reduce function will reduce all elements into singkle element and stored in x
print(b) #24


#Format method:

print("Hi! My name is {}, age is {}".format("Madhan",21)) #Hi! My name is Madhan, age is 21

a="Madhan"
b=21
msg="My name is {} and I am {} years old.".format(a,b)
msg="My name is {0} and I am {1} years old.".format(a,b)
print(msg) #My name is Madhan and I am 21 years old.

#fstring
name="om"
age=22
print(f"My name is {name} and I am {age} years old.") #My name is om and I am 22 years old.


#Python innerfunctions:
def fun1(msg):
    def fun2():
        print(msg)
    fun2()
fun1("Hello")        

'''Why Use Inner functions?

Inner functions provide several advantages:

Encapsulation: They help hide the inner logic from external access.
Code Organization: They make the code cleaner by grouping related functionality.
Access to Enclosing Scope: Inner functions can access variables of the outer function.
Closures: They allow functions to retain the state of their enclosing function even after execution.'''

#Decorators in python:
def decorator(func):
    def wrapper():
        print("Before calling the function")
        func()
        print("After calling the function")
    return wrapper

@decorator
def greet():
    print("Hello world")
greet()    
    
'''output:
Before calling the function
Hello world
After calling the function'''    

# Explanation:

# decorator takes the greet function as an argument.
# It returns a new function (wrapper) that first prints a message,
# calls greet() and then prints another message.
# The @decorator syntax is a shorthand for greet = decorator(greet).





#Oops Concepts In Python:
#-------------------------------------------
class Dog:
    sound="bark"
a=Dog()
print(a.sound)  #bark

#constructor
'''class Dog:
    species="Lab"
    
    def __init__(self,name,age): 
        self.name=name
        self.age=age
a=Dog()        
a=Dog("Cookie", 1)
print(a.name)
print(a.age)'''


class Dog:
   
    def __init__(self,name,age):  # initializes the object
        self.name=name
        self.age=age
    def __str__(self):   #prints the object as a string
        return f"{self.name} is {self.age} years old."
               
a=Dog("Cookie", 1)
b=Dog("cheeku", 2)
print(a)
print(b)


#Inheritance:
class Animal:
    def __init__(self,name):
        self.name=name
    def sound(self):   
        raise NotImplementedError("Subclass mut implement this method")
    
class Dog(Animal):
    def sound(self):
        return "woof!"
a=Animal("Generic Animal")
d=Dog("Buddy")

print(a.name) 
print(d.name)
print(d.sound()) 


#super Keyword
class Parent():
    def show(self):
        print("Inside Parent")
class Child(Parent):
    def show(self):
        super().show()
        print("Inside Child")
        
obj=Child()
obj.show()  


#Access Modifiers:

class Private:
    def __init__(self):
        self.__salary=50000 #private attribute double underscore
        
    def salary(self):
        return self.__salary  #access through public method
    
obj=Private()
print(obj.salary()) #5000
#print(obj.__salary) #Raies AttributeError
 
 
        
#Iterators:

numbers = [1, 2, 3, 4, 5] 
for num in numbers:
     print(num)


numbers = [1,2,3,4,5]
a = iter(numbers)
print(next(a)) # Output: 1
print(next(a)) # Output: 2


#Numpy
#____________________________ 


import numpy as np

arr=np.array([1,2,3])
print(arr) 
print(type(arr))  # <class:"numpy.ndarray">

np.zeros((2, 3))  #2x3 array of zeros
np.ones((3, 2))  #3x2 array of ones
np.arange(0, 10, 2)   # [02468]
np.linspace(0, 1,5)  #5 numbers between 0 and 1
np.random.rand(2, 2)  #2x2 random array 

a=np.array([1,2,3])
b=np.array([4,5,6])
print(a+b) #[5 7 9]
print(a*b) #[4 10 18]
print(a**2) #[1 4 9]
print(np.sqrt(a)) #[1 1.41 1.73]

A=np.array([1,2],[3,4])
B=np.array([2,0],[1,3])
print(np.dot(A,B)) #matrix multiplication
print(np.transpose(A)) #Transpose

arr=np.array([[10,20,30],[40,50,60]])
print(arr[0,1]) #20
print(arr[:,1]) #[20,50]
print(arr[1]) #[40 50 60]

arr=np.array([1,2,3,4])
print(arr.mean())
print(arr.sum())
print(arr.std()) #standard deviation
print(arr.max())
print(arr.min())
                   
                   
#Pandas
#used for data manipulation and analyis
#_____________________________________________________________________________

#1.series
import pandas as pd
s=pd.Series([10,20,30,40],index=['a','b','c','d'])
print(s)

'''output:
a 10
b 20
c 30
d 40
dtype:int64'''

#2.DataFrame
import pandas as pd
data={
    'Name':['Alice','Bob','Charlie'],
    'Age':[25,30,35],
    'City':['Newyork','paris','London']
}
df=pd.DataFrame(data)
print(df)

#output:
'''1 Bob 30 Paris
2 Charlie 35 London'''

#Key operations

print(df.head()) # First 5 roWS
df.tail(2) #Last 2 rowWS
df.info()  # Summary info
df.describe() # Stats summary
df.columns #Column names
df.shape # (rows, columns)
                 
#selection and filtering

df['Age'] #Select a column
df[['Name', 'City']] # Select multiple columns
df[df['Age'] > 28] # Filter rows
df.iloc[1] #Row by index (position)
df.loc[1] #Row by label/index


#modify

df['Age'] += 1 #Modify a column
df['Country'] = 'USA' #Add new column
df.rename(columns={'Age': 'Years'}, inplace=True)
df.drop('City', axis=1) #Drop column

'''output:
Cookie is 1 years old.
cheeku is 2 years old.'''